[[r_plumbing_porcelain]]
=== Encanamento e Porcelana

Este livro cobre como usar o Git com mais ou menos 30 verbos como `checkout`, `branch`, `remote`, entre outros.
Porém, como o Git a princípio era um conjunto de ferramentas para um VCS em vez de um VCS completo e amigável, ele tem uma porção de verbos que fazem trabalhos de baixo nível e foram feitos para serem encadeados no estilo UNIX ou serem chamados em _scripts_.
Esses comandos normalmente são chamados como comandos de ``encanamento'' (_plumbing_), e os mais amigáveis são chamados de comandos ``porcelana'' (_porcelain_).

Os primeiros nove capítulos deste livro lidam quase exclusivamente com comandos porcelana.
Entretanto, neste capítulo, você irá lidar na maior parte do tempo com os comandos de encanamento, de nível mais baixo, pois eles lhe darão acesso ao funcionamento interno do Git e ajudarão a demonstrar como e porque o Git faz o que ele faz.
Muitos desses comandos não foram feitos para serem usados manualmente na linha de comando, mas para serem usados como blocos de construção de novas ferramentas e _scripts_ próprios.

Quando você executa `git init` em um diretório novo ou existente, o Git cria um diretório `.git`, que é onde é localizado quase tudo que o Git armazena ou manipula.
Se você quer fazer uma cópia ou clonar o seu repositório, copiar apenas este diretório para outro lugar te dá quase tudo que você precisa.
Este capítulo inteiro basicamente lida com o conteúdo deste diretório.
A aparência dele é essa:

[source,console]
----
$ ls -F1
HEAD
config*
description
hooks/
info/
objects/
refs/
----

Talvez você veja outros arquivos nesse diretório, porém esse é um repositório logo após um `git init` - isso é o que você vê por padrão.
O arquivo `description` só é usado pelo programa GitWeb, então não se preocupe com ele.
O arquivo `config` contem opções de configuração específicas do seu projeto, e o diretório `info` mantém um arquivo `exclude` global (((excludes))) para padrões ignorados que você não gostaria de colocar em um arquivo `.gitignore`.
O diretório `hooks` contém scripts _hooks_ tanto para o lado do cliente quanto do servidor, que são discutidos em detalhes em <<ch08-customizing-git#r_git_hooks>>.

Isto nos deixa quatro importantes entradas: o arquivo `HEAD` e o (ainda a ser criado) arquivo `index`, além dos diretórios `objects` e `refs`.
Essas são as partes principais do Git.
O diretório `objects` guarda todo o conteúdo para o seu banco de dados, o diretório `refs` guarda referências para objetos _commit_ nesse banco de dados (_branches_), o arquivo `HEAD` aponta para a _branch_ em que você fez um _checkout_, e o arquivo `index` é onde o Git guarda a informação da área de _stage_.
Você irá agora ver cada uma das trẽs seções em detalhes para entender como o Git funciona.

