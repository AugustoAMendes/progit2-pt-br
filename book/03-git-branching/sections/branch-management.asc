[[r_branch_management]]
=== Gestão de Branches

(((branches, managing)))
Agora que você criou, mesclou e excluiu alguns branches, vamos dar uma olhada em algumas ferramentas de gerenciamento de branch que serão úteis quando você começar a usar o tempo todo.

O comando `git branch` faz mais do que apenas criar e excluir branches.(((git commands, branch)))
Se você executá-lo sem argumentos, obterá uma lista simples de seus branches atuais:

[source,console]
----
$ git branch
  iss53
* master
  testing
----

Observe o caractere `*` que no início do `master`: ele indica o branch que você fez check-out (ou seja, o branch para o qual` HEAD` aponta).
Isso significa que se você fizer commit neste ponto, o branch `master` será movido para frente com seu novo trabalho.
Para ver o último commit em cada branch, você pode executar `git branch -v`:

[source,console]
----
$ git branch -v
  iss53   93b412c Fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 Add scott to the author list in the readme
----

As opções `--merged` e` --no-merged` podem filtrar esta lista para branches que você tem ou ainda não mesclou no branch em que está atualmente.
Para ver quais branches já estão mesclados no branch em que você está, você pode executar `git branch --merged`:

[source,console]
----
$ git branch --merged
  iss53
* master
----

Como você já mesclou o `iss53` anteriormente, você o vê na sua lista.
Branches que aparecem na lista sem o `*` na frente deles geralmente podem ser deletados com `git branch -d`; você já incorporou o trabalho deles em outro branch, então não vai perder nada.

Para ver todos os branches que contêm trabalhos que você ainda não mesclou, você pode executar `git branch --no-merged`:

[source,console]
----
$ git branch --no-merged
  testing
----

Isso mostra seu outro branch.
Por conter trabalho que ainda não foi mesclado, tentar excluí-lo com `git branch -d` irá não irá executar:

[source,console]
----
$ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'.
----

Se você realmente deseja excluir o branch e perder esse trabalho, pode forçá-lo com `-D`, como mostra a mensagem.

[TIP]
====
As opções descritas acima, `--merged` e` --no-merged` irão, se não for dado um nome de commit ou branch como argumento, mostrar o que é, respectivamente, mesclado ou não mesclado em seu branch _current_.

Você sempre pode fornecer um argumento adicional para perguntar sobre o estado de mesclagem em relação a algum outro branch sem verificar esse outro branch primeiro, como: O que não foi feito merge no branch `master`?

[source,console]
----
$ git checkout testing
$ git branch --no-merged master
  topicA
  featureB
----
====
