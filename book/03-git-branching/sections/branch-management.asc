[[r_branch_management]]
=== Gestão de Branches

(((branches, managing)))
Agora que você criou, mesclou e excluiu alguns branches, vamos dar uma olhada em algumas ferramentas de gerenciamento de branch que serão úteis quando você começar a usar o tempo todo.

O comando `git branch` faz mais do que apenas criar e excluir branches.(((git commands, branch)))
Se você executá-lo sem argumentos, obterá uma lista simples de seus branches atuais:

[source,console]
----
$ git branch
  iss53
* master
  testing
----

Observe o caractere `*` que no início do `master`: ele indica o branch que você fez check-out (ou seja, o branch para o qual `HEAD` aponta).
Isso significa que se você fizer commit neste ponto, o branch `master` será movido para frente com seu novo trabalho.
Para ver o último commit em cada branch, você pode executar `git branch -v`:

[source,console]
----
$ git branch -v
  iss53   93b412c Fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 Add scott to the author list in the readme
----

As opções `--merged` e `--no-merged` podem filtrar esta lista para branches que você tem ou ainda não mesclou no branch em que está atualmente.
Para ver quais branches já estão mesclados no branch em que você está, você pode executar `git branch --merged`:

[source,console]
----
$ git branch --merged
  iss53
* master
----

Because you already merged in `iss53` earlier, you see it in your list.
Branches on this list without the `*` in front of them are generally fine to delete with `git branch -d`; you've already incorporated their work into another branch, so you're not going to lose anything.

To see all the branches that contain work you haven't yet merged in, you can run `git branch --no-merged`:

[source,console]
----
$ git branch --no-merged
  testing
----

This shows your other branch.
Because it contains work that isn't merged in yet, trying to delete it with `git branch -d` will fail:

[source,console]
----
$ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'.
----

If you really do want to delete the branch and lose that work, you can force it with `-D`, as the helpful message points out.

[TIP]
====
The options described above, `--merged` and `--no-merged` will, if not given a commit or branch name as an argument, show you what is, respectively, merged or not merged into your _current_ branch.

You can always provide an additional argument to ask about the merge state with respect to some other branch without checking  that other branch out first, as in, what is not merged into the `master` branch?
[source,console]
----
$ git checkout testing
$ git branch --no-merged master
  topicA
  featureB
----
====
